apply plugin: 'com.android.library'
apply from: file(rootProject.file('module.gradle'))

android {
    compileSdkVersion rootProject.ext.targetSdkVersion
    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        externalNativeBuild {
            cmake {
                // You can remove this "riru_" prefix if this module does not need to support Riru pre-v24
                arguments "-DMODULE_NAME:STRING=riru_$moduleId",
                        "-DRIRU_MODULE_API_VERSION=$moduleRiruApiVersion",
                        "-DRIRU_MODULE_VERSION=$moduleVersionCode",
                        "-DRIRU_MODULE_VERSION_NAME:STRING=\"$moduleVersion\"",
                        "-DRIRU_MODULE_MIN_API_VERSION=$moduleMinRiruApiVersion"
            }
        }
    }
    
    buildFeatures {
        prefab true
    }
    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
            version "3.10.2"
        }
    }
}

repositories {
    mavenLocal()
}

dependencies {
    // This is prefab aar which contains "riru.h"
    // If you want to use older versions of AGP,
    // you can copy this file from https://github.com/RikkaApps/Riru/blob/master/riru/src/main/cpp/include_riru/riru.h

    // The default version of prefab in AGP has problem to process header only package,
    // you may have to add android.prefabVersion=1.1.2 in your gradle.properties.
    // See https://github.com/google/prefab/issues/122

    implementation 'dev.rikka.ndk:riru:24.0.0'
}

def outDir = file("$rootDir/out")
def magiskDir = file("$outDir/magisk_module")
def zipName = "${moduleProp['id']}-${moduleVersion}.zip"

import org.apache.tools.ant.filters.FixCrLfFilter

import java.nio.file.Files
import java.security.MessageDigest

static def calcSha256(file) {
    def md = MessageDigest.getInstance("SHA-256")
    file.eachByte 4096, { bytes, size ->
        md.update(bytes, 0, size);
    }
    return md.digest().encodeHex()
}

android.libraryVariants.all { variant ->
    def task = variant.assembleProvider.get()
    task.doLast {
        // clear
        delete { delete magiskDir }

        // copy from template
        copy {
            from "$rootDir/template/magisk_module"
            into magiskDir.path
            exclude 'riru.sh'
        }
        // copy riru.sh
        copy {
            from "$rootDir/template/magisk_module"
            into magiskDir.path
            include 'riru.sh'
            filter { line ->
                line.replaceAll('%%%RIRU_MODULE_ID%%%', moduleId)
                        .replaceAll('%%%RIRU_MODULE_API_VERSION%%%', moduleRiruApiVersion.toString())
                        .replaceAll('%%%RIRU_MODULE_MIN_API_VERSION%%%', moduleMinRiruApiVersion.toString())
                        .replaceAll('%%%RIRU_MODULE_MIN_RIRU_VERSION_NAME%%%', moduleMinRiruVersionName)
            }
            filter(FixCrLfFilter.class,
                    eol: FixCrLfFilter.CrLf.newInstance("lf"))
        }
        // copy .git files manually since gradle exclude it by default
        Files.copy(file("$rootDir/template/magisk_module/.gitattributes").toPath(), file("${magiskDir.path}/.gitattributes").toPath())
        Files.copy(file("$rootDir/gadget.conf").toPath(), file("${magiskDir.path}/gadget.conf").toPath())
        // generate module.prop
        def modulePropText = ""
        moduleProp.each { k, v -> modulePropText += "$k=$v\n" }
        modulePropText = modulePropText.trim()
        file("$magiskDir/module.prop").text = modulePropText

        // copy native files
        def nativeOutDir = file("build/intermediates/cmake/$variant.name/obj")
        copy {
            from "$nativeOutDir"
            into "$magiskDir/lib"
            exclude "**/*.txt"
        }
        // copy libs files
        def sourceDir = file("libs")
        if (sourceDir.exists() && sourceDir.isDirectory()) {
            // 目标目录存在，执行复制操作
            copy {
                from sourceDir
                into "$magiskDir/lib"
                exclude "**/*.txt"
            }
        }

        // generate sha1sum
        fileTree("$magiskDir").matching {
            exclude "README.md", "META-INF"
        }.visit { f ->
            if (f.directory) return
            file(f.file.path + ".sha256sum").text = calcSha256(f.file)
        }
    }
    task.finalizedBy zipMagiskMoudle
}

task zipMagiskMoudle(type: Zip) {
    from magiskDir
    archiveName zipName
    destinationDir outDir
}